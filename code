#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Servo.h>

// Wi-Fi credentials
const char* ssid = "BrailleESP8266";
const char* password = "12345678";

ESP8266WebServer server(80);

// Servos
Servo servos[6];
const int servoPins[6] = {D1, D2, D3, D4, D5, D6};
const int raisedPosition = 0;        // Dot raised
const int loweredPosition = 60Â°;      // Dot lowered (neutral)

// Text handling
String inputText = "";
int currentIndex = 0;
bool textReceived = false;
bool displayFinished = false;

// Timing control
unsigned long lastStepTime = 0;
const unsigned long stepInterval = 1000;  // 1 second

// State machine
enum State {DISPLAY_CHARACTER, RESET_SERVOS, IDLE};
State currentState = IDLE;

// Braille patterns
struct Braille {
  char letter;
  int pattern[6];
};

Braille brailleMap[] = {
  {'a', {1, 0, 0, 0, 0, 0}}, {'b', {1, 1, 0, 0, 0, 0}}, {'c', {1, 0, 0, 1, 0, 0}},
  {'d', {1, 0, 0, 1, 1, 0}}, {'e', {1, 0, 0, 0, 1, 0}}, {'f', {1, 1, 0, 1, 0, 0}},
  {'g', {1, 1, 0, 1, 1, 0}}, {'h', {1, 1, 0, 0, 1, 0}}, {'i', {0, 1, 0, 1, 0, 0}},
  {'j', {0, 1, 0, 1, 1, 0}}, {'k', {1, 0, 1, 0, 0, 0}}, {'l', {1, 1, 1, 0, 0, 0}},
  {'m', {1, 0, 1, 1, 0, 0}}, {'n', {1, 0, 1, 1, 1, 0}}, {'o', {1, 0, 1, 0, 1, 0}},
  {'p', {1, 1, 1, 1, 0, 0}}, {'q', {1, 1, 1, 1, 1, 0}}, {'r', {1, 1, 1, 0, 1, 0}},
  {'s', {0, 1, 1, 1, 0, 0}}, {'t', {0, 1, 1, 1, 1, 0}}, {'u', {1, 0, 1, 0, 0, 1}},
  {'v', {1, 1, 1, 0, 0, 1}}, {'w', {0, 1, 0, 1, 1, 1}}, {'x', {1, 0, 1, 1, 0, 1}},
  {'y', {1, 0, 1, 1, 1, 1}}, {'z', {1, 0, 1, 0, 1, 1}}
};

void setup() {
  Serial.begin(115200);

  for (int i = 0; i < 6; i++) {
    servos[i].attach(servoPins[i]);
    servos[i].write(loweredPosition);
  }

  WiFi.softAP(ssid, password);
  Serial.println("ESP8266 Wi-Fi AP started: " + WiFi.softAPIP().toString());

  server.on("/text", handleTextInput);
  server.begin();
}

void loop() {
  server.handleClient();

  unsigned long currentMillis = millis();

  if (!textReceived || displayFinished) return;

  if (currentMillis - lastStepTime >= stepInterval) {
    lastStepTime = currentMillis;

    if (currentState == DISPLAY_CHARACTER) {
      displayCurrentCharacter();
      currentState = RESET_SERVOS;
    } else if (currentState == RESET_SERVOS) {
      resetServos();
      moveToNextCharacter();
    }
  }
}

void handleTextInput() {
  if (server.hasArg("data")) {
    inputText = server.arg("data");
    currentIndex = 0;
    textReceived = true;
    displayFinished = false;
    currentState = DISPLAY_CHARACTER;
    server.send(200, "text/plain", "Text received: " + inputText);
    Serial.println("Received text: " + inputText);
  } else {
    server.send(400, "text/plain", "Missing data argument.");
  }
}

void displayCurrentCharacter() {
  if (currentIndex >= inputText.length()) {
    displayFinished = true;
    currentState = IDLE;
    Serial.println("Display completed.");
    return;
  }

  char c = inputText[currentIndex];
  Serial.print("Displaying: ");
  Serial.println(c);

  int pattern[6];
  getBraillePattern(c, pattern);

  for (int i = 0; i < 6; i++) {
    servos[i].write(pattern[i] ? raisedPosition : loweredPosition);
  }
}

void resetServos() {
  Serial.println("Resetting servos...");
  for (int i = 0; i < 6; i++) {
    servos[i].write(loweredPosition);
  }
}

void moveToNextCharacter() {
  currentIndex++;
  if (currentIndex >= inputText.length()) {
    displayFinished = true;
    currentState = IDLE;
    Serial.println("Display finished for full text.");
  } else {
    currentState = DISPLAY_CHARACTER;
  }
}

void getBraillePattern(char c, int result[6]) {
  for (int i = 0; i < sizeof(brailleMap) / sizeof(brailleMap[0]); i++) {
    if (brailleMap[i].letter == tolower(c)) {
      for (int j = 0; j < 6; j++) {
        result[j] = brailleMap[i].pattern[j];
      }
      return;
    }
  }
  for (int j = 0; j < 6; j++) {
    result[j] = 0;
  }
}